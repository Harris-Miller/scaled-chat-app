networks:
  testnet:
    driver: bridge

volumes:
  db-data:
  redis-data:
  jaeger-data:
  localstack-data:
  prometheus-data:
  grafana-data:
  loki-data:
  tempo-data:
  minio-data:

services:
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_DB: scaled_chat_app
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    ports:
      - 5432:5432 # exposed for migrations from local
    restart: always
    volumes:
      - ./config/postgres-init:/docker-entrypoint-initdb.d
      - db-data:/var/lib/postgresql/data
    networks:
      - testnet

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    ports:
      - 6379:6379 # exposed for redis' dashboard
      - 8001:8001
    restart: always
    volumes:
      - redis-data:/data
    networks:
      - testnet

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000 # API port
      - 9001:9001 # Console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    networks:
      - testnet

  pg-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: pg-exporter
    depends_on:
      - postgres
    environment:
      DATA_SOURCE_NAME: postgres://postgres:postgres@postgres:5432/scaled_chat_app?sslmode=disable
      # - DATA_SOURCE_URI="postgres:5432/scaled_chat_app?sslmode=disable"
      # - DATA_SOURCE_USER=postgres
      # - DATA_SOURCE_PASS=postgres
    networks:
      - testnet

  redis-exporter:
    image: bitnami/redis-exporter:latest
    depends_on:
      - redis
    command: --redis.addr=redis:6379
    networks:
      - testnet

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    depends_on:
      - pg-exporter
      - redis-exporter
    ports:
      - 9090:9090
    volumes:
      - type: bind
        source: ./config/prometheus.yaml
        target: /etc/prometheus/prometheus.yaml
      - prometheus-data:/prometheus # Persistent storage for metrics
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    restart: unless-stopped
    networks:
      - testnet

  loki:
    image: grafana/loki:latest
    container_name: loki
    # command: -config.file=/etc/loki/config.yaml
    volumes:
      # - type: bind
      #   source: ./config/loki-config.yaml
      #   target: /etc/loki/config.yaml
      - loki-data:/loki
    ports:
      - 3100:3100
    networks:
      - testnet

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: -config.file=/etc/tempo.yaml
    ports:
      - 3200:3200 # tempo
      - 9095:9095 # tempo grpc
      - 4317:4317 # otlp grpc
      - 4318:4318 # otlp http
      - 9411:9411 # zipkin
    volumes:
      - type: bind
        source: ./config/tempo-config.yaml
        target: /etc/tempo.yaml
      - tempo-data:/tmp/tempo
    networks:
      - testnet

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
      - tempo
    ports:
      - 3001:3000
    volumes:
      - type: bind
        source: ./config/datasources.yaml
        target: /etc/grafana/provisioning/datasources/datasources.yaml
      - grafana-data:/var/lib/grafana # Persistent data for dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor metricsSummary
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-exploretraces-app/grafana-exploretraces-app-latest.zip;grafana-traces-app,redis-datasource
    networks:
      - testnet

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - 9092:9092
    networks:
      - testnet

  fakeapis:
    build: ./fakeApis
    container_name: fakeapis
    restart: on-failure:3
    ports:
      - 3009:3000
    networks:
      - testnet

  thumbnail-micro:
    build: ./thumbnail-micro
    container_name: thumbnail-micro
    depends_on:
      - grafana
      - minio
    environment:
      - OTEL_SERVICE_NAME="thumbnail-micro"
    env_file: ./.env.docker
    restart: on-failure:3
    ports:
      - 3008:3008
    networks:
      - testnet

  server:
    build: ./server
    depends_on:
      - postgres
      - redis
      - grafana
      - fakeapis
      - thumbnail-micro
      - minio
    environment:
      - OTEL_SERVICE_NAME="chat-server"
    env_file: ./.env.docker
    restart: on-failure:3
    deploy:
      replicas: 4
    networks:
      - testnet

  client:
    build: ./client
    container_name: client
    restart: on-failure:3
    depends_on:
      - server
    networks:
      - testnet

  nginx:
    build: ./nginx
    container_name: nginx
    depends_on:
      - server
      - client
    ports:
      - 80:80
    restart: on-failure:3
    networks:
      - testnet

  ## uncomment to test nginx as a load balancer for websockets across the 4 server replicas
  # socket-test:
  #   build:
  #     context: server
  #     dockerfile: Dockerfile.simulate
  #   depends_on:
  #     - nginx
  #   environment:
  #     DATABASE_URL: postgres://postgres:postgres@postgres:5432/scaled_chat_app?sslmode=disable
  #   deploy:
  #     replicas: 10
  #   networks:
  #     - testnet
