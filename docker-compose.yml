networks:
  testnet:
    driver: bridge

volumes:
  db-data:
  redis-data:
  jaeger-data:
  localstack-data:
  prometheus-data:
  grafana-data:
  loki-data:
  tempo-data:

services:
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_DB: scaled_chat_app
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    ports:
      - 5432:5432 # exposed for migrations from local
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - testnet

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    ports:
      - 6379:6379 # exposed for redis' dashboard
      - 8001:8001
    restart: always
    volumes:
      - redis-data:/data
    networks:
      - testnet

  # localstack:
  #   container_name: localstack-main
  #   image: localstack/localstack
  #   ports:
  #     - 127.0.0.1:4566:4566 # LocalStack Gateway
  #     - 127.0.0.1:4510-4559:4510-4559 # external services port range
  #   # environment:
  #   #   # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
  #   #   - DEBUG=${DEBUG:-0}
  #   volumes:
  #     - localstack-data:/var/lib/localstack
  #     - /var/run/docker.sock:/var/run/docker.sock # ???
  #   networks:
  #     - testnet

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - type: bind
        source: ./config/prometheus.yaml
        target: /etc/prometheus/prometheus.yaml
      - prometheus-data:/prometheus # Persistent storage for metrics
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    restart: unless-stopped
    networks:
      - testnet

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - 3001:3000
    volumes:
      - type: bind
        source: ./config/datasources.yaml
        target: /etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor metricsSummary
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-exploretraces-app/grafana-exploretraces-app-latest.zip;grafana-traces-app
    networks:
      - testnet

  loki:
    image: grafana/loki:latest
    container_name: loki
    # command: -config.file=/etc/loki/config.yaml
    volumes:
      # - type: bind
      #   source: ./config/loki-config.yaml
      #   target: /etc/loki/config.yaml
      - loki-data:/loki
    ports:
      - 3100:3100
    networks:
      - testnet

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: -config.file=/etc/tempo.yaml
    ports:
      - 3200:3200 # tempo
      - 9095:9095 # tempo grpc
      - 4317:4317 # otlp grpc
      - 4318:4318 # otlp http
      - 9411:9411 # zipkin
    volumes:
      - type: bind
        source: ./config/tempo-config.yaml
        target: /etc/tempo.yaml
      - tempo-data:/tmp/tempo
    networks:
      - testnet

  server:
    build: ./server
    depends_on:
      - postgres
      - redis
      - loki
      - grafana
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/scaled_chat_app?sslmode=disable
      LOKI_URL: http://loki:3100
      OTLP_TRACES_URL: http://tempo:4318/v1/traces
      PORT: 3000
      REDIS_URL: redis://redis:6379
      S3_URL: http://localstack-main:4566
    restart: on-failure:3
    deploy:
      replicas: 4
    networks:
      - testnet

  client:
    build: ./client
    container_name: client
    restart: on-failure:3
    depends_on:
      - server
    networks:
      - testnet

  nginx:
    build: ./nginx
    container_name: nginx
    depends_on:
      - server
      - client
    ports:
      - 80:80
    restart: on-failure:3
    networks:
      - testnet

  socket-test:
    build:
      context: server
      dockerfile: Dockerfile.simulate
    depends_on:
      - nginx
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/scaled_chat_app?sslmode=disable
    deploy:
      replicas: 10
    networks:
      - testnet
