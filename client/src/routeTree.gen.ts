/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RoomsRouteRouteImport } from './routes/rooms/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RoomsIndexRouteImport } from './routes/rooms/index'
import { Route as RadixIndexRouteImport } from './routes/radix/index'
import { Route as ProfileIndexRouteImport } from './routes/profile/index'
import { Route as RoomsRoomIdRouteRouteImport } from './routes/rooms/$roomId/route'
import { Route as RoomsRoomIdIndexRouteImport } from './routes/rooms/$roomId/index'
import { Route as RoomsRoomIdCanvasRouteImport } from './routes/rooms/$roomId/canvas'

const RoomsRouteRoute = RoomsRouteRouteImport.update({
  id: '/rooms',
  path: '/rooms',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomsIndexRoute = RoomsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RoomsRouteRoute,
} as any)
const RadixIndexRoute = RadixIndexRouteImport.update({
  id: '/radix/',
  path: '/radix/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileIndexRoute = ProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomsRoomIdRouteRoute = RoomsRoomIdRouteRouteImport.update({
  id: '/$roomId',
  path: '/$roomId',
  getParentRoute: () => RoomsRouteRoute,
} as any)
const RoomsRoomIdIndexRoute = RoomsRoomIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RoomsRoomIdRouteRoute,
} as any)
const RoomsRoomIdCanvasRoute = RoomsRoomIdCanvasRouteImport.update({
  id: '/canvas',
  path: '/canvas',
  getParentRoute: () => RoomsRoomIdRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/rooms': typeof RoomsRouteRouteWithChildren
  '/rooms/$roomId': typeof RoomsRoomIdRouteRouteWithChildren
  '/profile': typeof ProfileIndexRoute
  '/radix': typeof RadixIndexRoute
  '/rooms/': typeof RoomsIndexRoute
  '/rooms/$roomId/canvas': typeof RoomsRoomIdCanvasRoute
  '/rooms/$roomId/': typeof RoomsRoomIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/profile': typeof ProfileIndexRoute
  '/radix': typeof RadixIndexRoute
  '/rooms': typeof RoomsIndexRoute
  '/rooms/$roomId/canvas': typeof RoomsRoomIdCanvasRoute
  '/rooms/$roomId': typeof RoomsRoomIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/rooms': typeof RoomsRouteRouteWithChildren
  '/rooms/$roomId': typeof RoomsRoomIdRouteRouteWithChildren
  '/profile/': typeof ProfileIndexRoute
  '/radix/': typeof RadixIndexRoute
  '/rooms/': typeof RoomsIndexRoute
  '/rooms/$roomId/canvas': typeof RoomsRoomIdCanvasRoute
  '/rooms/$roomId/': typeof RoomsRoomIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/rooms'
    | '/rooms/$roomId'
    | '/profile'
    | '/radix'
    | '/rooms/'
    | '/rooms/$roomId/canvas'
    | '/rooms/$roomId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/profile'
    | '/radix'
    | '/rooms'
    | '/rooms/$roomId/canvas'
    | '/rooms/$roomId'
  id:
    | '__root__'
    | '/'
    | '/rooms'
    | '/rooms/$roomId'
    | '/profile/'
    | '/radix/'
    | '/rooms/'
    | '/rooms/$roomId/canvas'
    | '/rooms/$roomId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RoomsRouteRoute: typeof RoomsRouteRouteWithChildren
  ProfileIndexRoute: typeof ProfileIndexRoute
  RadixIndexRoute: typeof RadixIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/rooms': {
      id: '/rooms'
      path: '/rooms'
      fullPath: '/rooms'
      preLoaderRoute: typeof RoomsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rooms/': {
      id: '/rooms/'
      path: '/'
      fullPath: '/rooms/'
      preLoaderRoute: typeof RoomsIndexRouteImport
      parentRoute: typeof RoomsRouteRoute
    }
    '/radix/': {
      id: '/radix/'
      path: '/radix'
      fullPath: '/radix'
      preLoaderRoute: typeof RadixIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rooms/$roomId': {
      id: '/rooms/$roomId'
      path: '/$roomId'
      fullPath: '/rooms/$roomId'
      preLoaderRoute: typeof RoomsRoomIdRouteRouteImport
      parentRoute: typeof RoomsRouteRoute
    }
    '/rooms/$roomId/': {
      id: '/rooms/$roomId/'
      path: '/'
      fullPath: '/rooms/$roomId/'
      preLoaderRoute: typeof RoomsRoomIdIndexRouteImport
      parentRoute: typeof RoomsRoomIdRouteRoute
    }
    '/rooms/$roomId/canvas': {
      id: '/rooms/$roomId/canvas'
      path: '/canvas'
      fullPath: '/rooms/$roomId/canvas'
      preLoaderRoute: typeof RoomsRoomIdCanvasRouteImport
      parentRoute: typeof RoomsRoomIdRouteRoute
    }
  }
}

interface RoomsRoomIdRouteRouteChildren {
  RoomsRoomIdCanvasRoute: typeof RoomsRoomIdCanvasRoute
  RoomsRoomIdIndexRoute: typeof RoomsRoomIdIndexRoute
}

const RoomsRoomIdRouteRouteChildren: RoomsRoomIdRouteRouteChildren = {
  RoomsRoomIdCanvasRoute: RoomsRoomIdCanvasRoute,
  RoomsRoomIdIndexRoute: RoomsRoomIdIndexRoute,
}

const RoomsRoomIdRouteRouteWithChildren =
  RoomsRoomIdRouteRoute._addFileChildren(RoomsRoomIdRouteRouteChildren)

interface RoomsRouteRouteChildren {
  RoomsRoomIdRouteRoute: typeof RoomsRoomIdRouteRouteWithChildren
  RoomsIndexRoute: typeof RoomsIndexRoute
}

const RoomsRouteRouteChildren: RoomsRouteRouteChildren = {
  RoomsRoomIdRouteRoute: RoomsRoomIdRouteRouteWithChildren,
  RoomsIndexRoute: RoomsIndexRoute,
}

const RoomsRouteRouteWithChildren = RoomsRouteRoute._addFileChildren(
  RoomsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RoomsRouteRoute: RoomsRouteRouteWithChildren,
  ProfileIndexRoute: ProfileIndexRoute,
  RadixIndexRoute: RadixIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
